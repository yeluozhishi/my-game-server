# handlers 配置要输出的位置
# java.util.logging.ConsoleHandler = 控制台
# java.util.logging.FileHandler = 文件
handlers = java.util.logging.ConsoleHandler,java.util.logging.FileHandler

# 全局配置,其凌驾于所有的等级配置之上
#.level = WARNING


# 文件具体配置项
# 文件路径和名称的格式
# "/" 本地路径名分隔符
# "%t" 系统临时目录
# "%h" "user.home" 系统属性的值
# "%g" 区分循环日志的生成号
# "%u" 解决冲突的惟一号码
# "%%" 转换为单个百分数符号"%"
java.util.logging.FileHandler.pattern = E:/log/log.log
# 每个文件最大的存放的字节数
java.util.logging.FileHandler.limit = 0
# 指代能存放多少个文件,例如上方配置50000字节,当达到时就会因为count=1导致需要删除满的,然后创建新的存放
java.util.logging.FileHandler.count = 1
# 文件输出格式,默认是xml格式 = java.util.logging.XMLFormatter
# java.util.logging.SimpleFormatter 会以字符串的形式输出
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
# 设置每次输出是否追加的已有文件的后面,默认是false
java.util.logging.FileHandler.append = true
java.util.logging.FileHandler.level = SEVERE

# 设置默认控制台输出的Level(受全局Level影响)
java.util.logging.ConsoleHandler.level = INFO

# 设置控制台输出格式
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

# 设置SimpleFormatter的输出格式
#java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n
java.util.logging.SimpleFormatter.format=%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS.%1$tN %1$Tp %2$s%n%4$s: %5$s%6$s%n


# 设置具体的类的输出Level
#com.whk.test = WARNING